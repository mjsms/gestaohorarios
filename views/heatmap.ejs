


<div>
  <h3>Heatmap de Ocupação Semanal</h3>

  <div style="display:flex;align-items:center;gap:10px;">
    <a id="prevBtn" class="waves-effect waves-light btn-small">←</a>
    <span id="weekLabel" style="min-width:160px;text-align:center;"></span>
    <a id="nextBtn" class="waves-effect waves-light btn-small">→</a>
  </div>

  <canvas id="heatmapCanvas"></canvas>

  <style>
    #heatmapCanvas{
      width:100%;max-width:980px;height:600px;display:block;margin:0 auto;
    }
    #slotModal .modal-content{max-height:70vh;overflow:auto;}
  </style>

  <!-- Modal Materialize -->
  <div id="slotModal" class="modal">
    <div class="modal-content">
      <h5 id="slotTitle"></h5>
      <ul id="slotList" class="collection"></ul>
    </div>
    <div class="modal-footer">
      <a href="#!" class="modal-close waves-effect waves-green btn-flat">Fechar</a>
    </div>
  </div>
</div>

<!-- libs -->
<script src="https://cdn.jsdelivr.net/npm/date-fns@4.1.0/cdn.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-chart-matrix@1.3.0"></script>

<script>
/* ---------- parâmetros do controller ---------- */
const INIT_YEAR = <%- initYear ? JSON.stringify(initYear) : 'null' %>;
const INIT_WEEK = <%- initWeek ? JSON.stringify(initWeek) : 'null' %>;

/* ---------- estado ---------- */
let year  = INIT_YEAR ? +INIT_YEAR : new Date().getFullYear();
let week  = INIT_WEEK ? +INIT_WEEK : dateFns.getISOWeek(new Date());
let chart, detailMap = {}, weekStartDate = null;

const dayLbl = ['Seg','Ter','Qua','Qui','Sex','Sáb','Dom'];
const canvas = document.getElementById('heatmapCanvas');
canvas.height = 600;

/* ---------- cria / actualiza o gráfico ---------- */
function renderChart(json){
  const max = Math.max(...json.data.map(d=>d.v)) || 1;
  const colour = v => `hsl(${120-120*v/max},85%,45%)`;

  if(!chart){
    chart = new Chart(canvas,{
      type:'matrix',
      data:{datasets:[{
        data:json.data,
        backgroundColor:c=>colour(c.raw.v),
        borderColor:'rgba(255,255,255,.25)',
        borderWidth:1,
        width :ctx=>ctx.chart.scales.x.getPixelForValue(2)-ctx.chart.scales.x.getPixelForValue(1)-2,
        height:ctx=>ctx.chart.scales.y.getPixelForValue(ctx.raw.y)-ctx.chart.scales.y.getPixelForValue(ctx.raw.y+1)-2,
      }]},
      options:{
        responsive:false,
        maintainAspectRatio:true,
        layout:{padding:{top:40}},
        scales:{
          x:{type:'linear',position:'top',min:1,max:7,offset:true,
             ticks:{stepSize:1,padding:12,font:{size:12,weight:'bold'},
                    callback:v=>dayLbl[v-1]},
             grid:{display:false}},
          y:{type:'linear',reverse:false,min:8,max:21,
             ticks:{stepSize:1,padding:4,font:{size:12}},
             grid:{display:false}}
        },
        plugins:{
          legend:{display:false},
          tooltip:{displayColors:false,callbacks:{
            title:c=>`${dayLbl[c[0].raw.x-1]}, ${c[0].raw.y}-${c[0].raw.y+1}h`,
            label:c=>`Aulas: ${c.raw.v}`
          }}
        }
      }
    });
  }else{
    const ds = chart.data.datasets[0];
    ds.data = json.data;
    ds.backgroundColor = c=>colour(c.raw.v);
    chart.update();
  }
}

/* ---------- fetch + label topo ---------- */
async function load(){
  const r = await fetch(`/heatmap/data/${year}/${week}`);
  if(!r.ok){ window.M?.toast?.({html:'Erro a obter dados'}); return; }
  const j = await r.json();

  detailMap     = j.details;
  weekStartDate = new Date(j.weekStart);

  renderChart(j);

  const fmt = d => d.toLocaleDateString('pt-PT',{day:'2-digit',month:'2-digit'});
  weekLabel.textContent =
    `${year} – S${String(week).padStart(2,'0')} | ${fmt(weekStartDate)} — ${fmt(new Date(j.weekEnd))}`;
}

/* ---------- change week ---------- */
function change(delta){
  const base = dateFns.addWeeks(dateFns.parseISO(`${year}-W${String(week).padStart(2,'0')}`), delta);
  week = dateFns.getISOWeek(base);
  year = base.getFullYear();
  load();
}
prevBtn.onclick = ()=>change(-1);
nextBtn.onclick = ()=>change(1);

/* ---------- modal on click ---------- */
canvas.onclick = evt=>{
  const els = chart.getElementsAtEventForMode(evt,'nearest',{intersect:true},true);
  if(!els.length) return;
  const cell = els[0].element.$context.raw;   // {x,y,v}
  const key  = `${cell.x}-${cell.y}`;
  const cls  = detailMap[key] || [];

  const slotDate = dateFns.addDays(weekStartDate, cell.x - 1);
    const dateTxt = slotDate.toLocaleDateString('pt-PT', {
    weekday: 'short',
    day    : '2-digit',
    month  : '2-digit',
    year   : 'numeric'   // ← adiciona o ano
    });

  slotTitle.textContent = `${dateTxt}, ${cell.y}-${cell.y+1}h — ${cls.length} aulas`;

  slotList.innerHTML =  cls.map(c => `
  <div class="card grey lighten-4" style="margin:6px">
    <div class="card-content" style="padding:8px">
      <span class="card-title" style="font-size:16px">${c.subject}</span>
      <div class="chip">${c.shift}</div>
      <div class="chip green lighten-2">Sala ${c.room}</div>
      <div class="chip blue lighten-2">${c.group}</div>
    </div>
  </div>
`).join('');

  const modal = M.Modal.getInstance(slotModal) || M.Modal.init(slotModal);
  modal.open();
};

window.addEventListener('resize',()=>chart&&chart.resize());

load();   // inicial
</script>
