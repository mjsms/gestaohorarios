<div class="">
    <!-- Button to open the modal for uploading schedules -->
    <a class="waves-effect waves-light btn modal-trigger" href="#uploadModal">Upload de Horários</a>
    <button id="compare-versions-btn" class="btn waves-effect waves-light" disabled>Comparar Versões</button>
    <!-- Estrutura do modal -->
    <div id="uploadModal" class="modal">
        <div class="modal-content">
            <h4>Upload de Horários</h4>
            <form id="uploadHorariosForm" enctype="multipart/form-data">
                <!-- Input for description -->
                <div class="input-field" style="margin-top:40px;">
                    <label for="description">Descrição:</label>
                    <input type="text" id="description" name="description" placeholder="Adicione uma descrição" required>
                </div>
                <!-- Input for file upload -->
                <div class="file-field input-field">
                    <div class="btn">
                        <span>File</span>
                        <input type="file" id="salasFile" name="file">
                    </div>
                    <div class="file-path-wrapper">
                        <input class="file-path validate" type="text" placeholder="Selecione o ficheiro de salas (CSV)">
                    </div>
                </div>
                <!-- Submit button -->
                <button type="submit" class="btn waves-effect waves-light">Upload Horários</button>
            </form>
            <!-- Spinner -->
            <div id="spinner" style="display: none; text-align: center; margin-top: 20px;">
                <div class="preloader-wrapper active">
                    <div class="spinner-layer spinner-blue">
                        <div class="circle-clipper left"><div class="circle"></div></div>
                        <div class="gap-patch"><div class="circle"></div></div>
                        <div class="circle-clipper right"><div class="circle"></div></div>
                    </div>
                </div>
                <p>Processando o upload...</p>
            </div>
        </div>
        <div class="modal-footer">
            <a href="#!" class="modal-close waves-effect waves-green btn-flat">Fechar</a>
        </div>
    </div>

    <div class="row">
        <!-- Container for the Tabulator table -->
        <h3>Horários</h3>
        <div class="table-container col s12">
            <div id="versions-table"></div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        var elems = document.querySelectorAll('.modal');
        M.Modal.init(elems);

        let selectedVersions = new Set();

        const table = new Tabulator("#versions-table", {
            ajaxURL: "/schedule/json", // URL para o endpoint de horários com paginação
            ajaxParams: { page: 1, pageSize: 250 }, // Parâmetros iniciais
            ajaxConfig: "GET", // Tipo de requisição
            pagination: "remote", // Usar paginação remota
            paginationSize: 250, // Tamanho da página
            layout: "fitColumns",
            selectable: true, // Habilitar seleção de linhas
            columns: [
                { 
                    title: "Selecionar",
                    formatter: "rowSelection",
                    titleFormatter: "rowSelection",
                    headerSort: false,
                    hozAlign: "center",
                    cellClick: function(e, cell) {
                        cell.getRow().toggleSelect();
                    }
                },
                { 
                    title: "Descrição", 
                    field: "description", 
                    sorter: "string",
                    formatter: function(cell) {
                        const id = cell.getRow().getData().id; // Get the ID from the row
                        const description = cell.getValue();
                        return `<a href="/schedule/${id}" class="btn-flat blue-text">${description}</a>`;
                    }
                },
                { title: "Atual", field: "isCurrent", sorter: "boolean", formatter: "tickCross" },
                {
                    title: "Estado", 
                    field: "status", 
                    sorter: "string",
                    formatter: function(cell) {
                        const value = cell.getValue();
                        if (value === 'pending') {
                            return 'Pendente';
                        } else if (value === 'processed') {
                            return 'Processado';
                        } else if (value === 'error') {
                            return 'Erro';
                        } else {
                            return value; // Caso haja outros estados, exibe o valor original
                        }
                    }
                },
                { title: "Criado em", field: "createdAt", sorter: "date" },
                { 
                    title: "Ações", 
                    field: "id",
                    hozAlign: "center",
                    formatter: function(cell) {
                        const id = cell.getValue();
                        return `<button class="btn waves-effect waves-light mark-current-btn" data-id="${id}">Marcar como Atual</button>`;
                    },
                    cellClick: function(e, cell) {
                        const id = cell.getValue();
                        fetch(`/schedule/mark-current/${id}`, {
                            method: 'POST',
                        })
                        .then(response => response.json())
                        .then(data => {
                            M.toast({html: data.message, classes:'green'});
                            // Recarregar a tabela para refletir a mudança
                            table.setData();
                        })
                        .catch(err => {
                            console.error(err);
                            M.toast({html: 'Erro ao marcar como atual', classes:'red'});
                        });
                    }
                }
            ],
            ajaxResponse: function(url, params, response) {
                // Processa a resposta para extrair apenas os dados
                return response.data; // Acesse o array de dados correto
            },
        });

        // Evento de alteração da seleção das linhas
        table.on("rowSelectionChanged", function(data) {
            selectedVersions = new Set(data.map(row => row.id));
            updateCompareButtonState();
        });

        function updateCompareButtonState() {
            const compareBtn = document.getElementById("compare-versions-btn");
            compareBtn.disabled = !(selectedVersions.size >= 2 && selectedVersions.size <= 3);
        }

        // Handle the upload form submission
        document.getElementById('uploadHorariosForm').addEventListener('submit', function (e) {
            e.preventDefault();

            const formData = new FormData(this);
            const spinner = document.getElementById('spinner');
            const form = document.getElementById('uploadHorariosForm');

            form.style.display = 'none'; // Hide the form
            spinner.style.display = 'block'; // Show the spinner

            fetch('schedule/upload', {
                method: 'POST',
                body: formData,
            })
                .then((response) => {
                    if (!response.ok) {
                        throw new Error('Erro ao carregar o ficheiro.');
                    }
                    return response.text();
                })
                .then(() => {
                    spinner.style.display = 'none';
                    M.toast({ html: 'Versão de horários carregada com sucesso!', classes: 'green' });
                    location.reload();
                })
                .catch((error) => {
                    form.style.display = 'block';
                    spinner.style.display = 'none';
                    M.toast({ html: error.message || 'Erro ao carregar o ficheiro.', classes: 'red' });
                });
        });

        document.getElementById("compare-versions-btn").addEventListener("click", () => {
            if (selectedVersions.size < 2 || selectedVersions.size > 3) {
                M.toast({ html: "Por favor selecione entre 2 e 3 versões.", classes: "red" });
                return;
            }

            const ids = Array.from(selectedVersions).join(",");
            window.location.href = `/schedule/compare-versions?ids=${ids}`;
        });
    });
</script>

<style>
    .table-container {
        overflow-x: auto;
    }

    #spinner .preloader-wrapper {
        display: inline-block;
    }

    .tabulator-row .tabulator-cell:first-child {
        text-align: center;
    }

    .tabulator-row .tabulator-cell:first-child input[type="checkbox"] {
        display: inline-block !important;
        opacity: 1 !important;
        pointer-events: all !important;
    }
    .tabulator-row.tabulator-selected {
        background-color: #e0f2f1 !important; /* Por exemplo, um verde claro */
    }
    .tabulator-row .tabulator-cell input[type="checkbox"] {
        transform: scale(1.5);
        width: 20px;
        height: 20px;
        margin: 0 10px; /* Ajuste de margem se necessário */
    }
</style>
