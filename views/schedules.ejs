<!-- Button to open the modal for uploading schedules -->
<a class="waves-effect waves-light btn modal-trigger" href="#uploadModal">Upload de Horários</a>

<!-- Estrutura do modal -->
<div id="uploadModal" class="modal">
    <div class="modal-content">
        <h4>Upload de Salas</h4>
        <form id="uploadHorariosForm" enctype="multipart/form-data">
            <!-- Input for description -->
            <div class="input-field" style="margin-top:40px;">
                <label for="description">Descrição:</label>
                <input type="text" id="description" name="description" placeholder="Adicione uma descrição" required>
            </div>
            <!-- Input for file upload -->
            <div class="file-field input-field">
                <div class="btn">
                    <span>File</span>
                    <input type="file" id="salasFile" name="file">
                </div>
                <div class="file-path-wrapper">
                    <input class="file-path validate" type="text" placeholder="Selecione o ficheiro de salas (CSV)">
                </div>
            </div>
            <!-- Submit button -->
            <button type="submit" class="btn waves-effect waves-light">Upload Salas</button>
        </form>
        <!-- Spinner -->
        <div id="spinner" style="display: none; text-align: center; margin-top: 20px;">
            <div class="preloader-wrapper active">
                <div class="spinner-layer spinner-blue">
                    <div class="circle-clipper left"><div class="circle"></div></div>
                    <div class="gap-patch"><div class="circle"></div></div>
                    <div class="circle-clipper right"><div class="circle"></div></div>
                </div>
            </div>
            <p>Processando o upload...</p>
        </div>
    </div>
    <div class="modal-footer">
        <a href="#!" class="modal-close waves-effect waves-green btn-flat">Fechar</a>
    </div>
</div>

<div class="row">
    <!-- Container for the Tabulator table -->
    <h3>Horários</h3>
    <div class="table-container col s12">
        <div id="versions-table"></div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        var elems = document.querySelectorAll('.modal');
        M.Modal.init(elems);
        
        const table = new Tabulator("#versions-table", {
            ajaxURL: "/schedule/json", // URL para o endpoint de horários com paginação
            ajaxParams: { page: 1, pageSize: 250 }, // Parâmetros iniciais
            ajaxConfig: "GET", // Tipo de requisição
            pagination: "remote", // Usar paginação remota
            paginationSize: 250, // Tamanho da página
            layout: "fitColumns",
            columns: [
                { 
                    title: "ID", 
                    field: "id", 
                    sorter: "number",
                },
                { 
                    title: "Descrição", 
                    field: "description", 
                    sorter: "string",
                    formatter: function(cell) {
                        const id = cell.getRow().getData().id; // Get the ID from the row
                        const description = cell.getValue();
                        return `<a href="/schedule/${id}" class="btn-flat blue-text">${description}</a>`;
                    }
                },
                { title: "Atual", field: "isCurrent", sorter: "boolean", formatter: "tickCross" },
                { title: "Estado", field: "status", sorter: "string" },
                { title: "Criado em", field: "createdAt", sorter: "date" }
            ],
            ajaxResponse: function(url, params, response) {
                // Processa a resposta para extrair apenas os dados
                return response.data; // Acesse o array de dados correto
            },
        });

        // Handle the upload form submission
        document.getElementById('uploadHorariosForm').addEventListener('submit', function (e) {
            e.preventDefault();

            const formData = new FormData(this);
            const spinner = document.getElementById('spinner');
            const form = document.getElementById('uploadHorariosForm');

            form.style.display = 'none'; // Hide the form
            spinner.style.display = 'block'; // Show the spinner

            fetch('schedule/upload', {
                method: 'POST',
                body: formData,
            })
                .then((response) => {
                    if (!response.ok) {
                        throw new Error('Erro ao carregar o ficheiro.');
                    }
                    return response.text();
                })
                .then(() => {
                    spinner.style.display = 'none';
                    M.toast({ html: 'Versão de horários carregada com sucesso!', classes: 'green' });
                    location.reload();
                })
                .catch((error) => {
                    form.style.display = 'block';
                    spinner.style.display = 'none';
                    M.toast({ html: error.message || 'Erro ao carregar o ficheiro.', classes: 'red' });
                });
        });
    });
</script>

<style>
    .table-container {
        overflow-x: auto;
    }

    #spinner .preloader-wrapper {
        display: inline-block;
    }
</style>
